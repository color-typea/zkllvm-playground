{
  "language": "Solidity",
  "sources": {
    "@nilfoundation/evm-placeholder-verification/contracts/interfaces/verifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0.\n//---------------------------------------------------------------------------//\n// Copyright (c) 2022 Mikhail Komarov <nemo@nil.foundation>\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//---------------------------------------------------------------------------//\npragma solidity ^0.8.0;\n\ninterface IVerifier {\n    function verify(        \n        bytes calldata blob,\n        uint256[] calldata init_params,\n        int256[][] calldata columns_rotations,\n        uint256[] calldata public_input,\n        address gate_argument\n    ) external view returns (bool);\n}\n"
    },
    "contracts/CircuitParams.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.4;\n\nlibrary CircuitParams {\n    uint256 constant modulus = 28948022309329048855892746252171976963363056481941560715954676764349967630337;\n    uint256 constant r = 2;\n    uint256 constant max_degree = 7;\n    uint256 constant lambda = 2;\n\n    uint256 constant rows_amount = 8;\n    uint256 constant omega = 199455130043951077247265858823823987229570523056509026484192158816218200659;\n\n    function get_D_omegas()\n    internal pure returns (uint256[2] memory) {\n        uint256[2] memory D_omegas = [\n            uint256(199455130043951077247265858823823987229570523056509026484192158816218200659), \n            uint256(24760239192664116622385963963284001971067308018068707868888628426778644166363)\n        ];\n        return (D_omegas);\n    }\n    function get_step_list()\n    internal pure returns (uint256[2] memory) {\n        uint256[2] memory step_list = [\n            uint256(1), \n            uint256(1)\n        ];\n        return step_list;\n    }\n\n    function get_arithmetization_params()\n    internal pure returns (uint256[4] memory) {\n        uint256[4] memory arithmetization_params = [\n            uint256(15), \n            uint256(5), \n            uint256(5), \n            uint256(30)\n        ];\n        return (arithmetization_params);\n    }\n\n    function get_init_params()\n    internal pure returns (uint256[] memory init_params) {\n        uint256[2] memory d_omegas = get_D_omegas();\n        uint256[2] memory step_list = get_step_list();\n        uint256[4] memory arithmetization_params = get_arithmetization_params();\n\n        uint256[] memory init_args = new uint256[](\n            6 // static fields: modulus to omega\n            + (1 + d_omegas.length) // D_omegas.length + D_omegas\n            + (1 + step_list.length) // step_list.length + step_list\n            + (1 + arithmetization_params.length) // arithmetization_params.length + arithmetization_params\n        );\n\n        uint cur_index = 0;\n\n        init_args[cur_index++] = modulus;\n        init_args[cur_index++] = r;\n        init_args[cur_index++] = max_degree;\n        init_args[cur_index++] = lambda;\n        init_args[cur_index++] = rows_amount;\n        init_args[cur_index++] = omega;\n\n        // Append D_omegas and length\n        init_args[cur_index++] = d_omegas.length;\n        for (uint idx = 0; idx < d_omegas.length; idx++) {\n            init_args[cur_index++] = d_omegas[idx];\n        }\n\n        // Append step_list and length\n        init_args[cur_index++] = step_list.length;\n        for (uint idx = 0; idx < step_list.length; idx++) {\n            init_args[cur_index++] = step_list[idx];\n        }\n\n        // Append arithmetization_params and length\n        init_args[cur_index++] = arithmetization_params.length;\n        for (uint idx = 0; idx < arithmetization_params.length; idx++) {\n            init_args[cur_index++] = arithmetization_params[idx];\n        }\n\n        return (init_args);\n    }\n\n    function makeDyn1(int256 value) internal pure returns (int256[] memory) {\n        int256[] memory rslt = new int256[](1);\n        rslt[0] = value;\n        return rslt;\n    }\n\n    function makeDyn3(int256 value1, int256 value2, int256 value3) internal pure returns (int256[] memory) {\n        int256[] memory rslt = new int256[](3);\n        rslt[0] = value1;\n        rslt[1] = value2;\n        rslt[2] = value3;\n        return rslt;\n    }\n\n    function get_column_rotations()\n    internal pure returns (int256[][] memory) {\n        int256[][] memory column_rotations = new int256[][](55);\n        uint idx = 0;\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        column_rotations[idx++] = makeDyn1(0);\n        return column_rotations;\n    }\n}"
    },
    "contracts/Contract.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8 <0.9;\n\nimport \"./CircuitParams.sol\";\nimport \"@nilfoundation/evm-placeholder-verification/contracts/interfaces/verifier.sol\";\n\n\ncontract Contract {\n    struct OracleReport {\n        uint256 sum;\n    }\n\n    struct OracleProof {\n        uint256[] public_input;\n        bytes zkProof;\n    }\n\n    event ReportAccepted(OracleReport report);\n    event ReportRejected(OracleReport report, string reason);\n\n\n    IVerifier zkllvmVerifier;\n    address verificationGate;\n\n    constructor(\n        address zkllvmVerifier_,\n        address verificationGate_\n    ) {\n        zkllvmVerifier = IVerifier(zkllvmVerifier_);\n        verificationGate = verificationGate_;\n    }\n\n    function submitReportData(\n        OracleReport calldata report,\n        OracleProof calldata proof\n    ) public {\n        _require(\n            verifyZKLLVMProof(verificationGate, report, proof),\n            report,\n            \"ZK proof did not verify\"\n        );\n\n        emit ReportAccepted(report);\n    }\n\n    function verifyZKLLVMProof(\n        address gate, OracleReport memory report, OracleProof memory proof\n    ) internal view returns (bool) {\n        uint256[] memory init_params = CircuitParams.get_init_params();\n        int256[][] memory columns_rotations = CircuitParams.get_column_rotations();\n        return zkllvmVerifier.verify(proof.zkProof, init_params, columns_rotations, proof.public_input, gate);\n    }\n\n    function _require(bool condition, OracleReport memory report, string memory reason) internal {\n        if (!condition) {\n            // this is largely for documentation purposes, events in rejected transactions are discarded\n            emit ReportRejected(report, reason);\n            revert(reason);\n        }\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}