
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) 2023 Generated by ZKLLVM-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "@nilfoundation/evm-placeholder-verification/contracts/types.sol";
import "@nilfoundation/evm-placeholder-verification/contracts/basic_marshalling.sol";
import "@nilfoundation/evm-placeholder-verification/contracts/interfaces/modular_gate_argument.sol";
import "hardhat/console.sol";


contract modular_gate_argument_sha256 is IGateArgument{
    uint256 constant modulus = 28948022309329048855892746252171976963363056481941560715954676764349967630337;

    // Append commitments
    function verify(
        bytes calldata blob,
        uint256 theta
    ) external view returns (uint256 F){
        uint256 theta_acc = 1;
        uint256 eval;
        uint256 x;

		uint256 prod;
		uint256 sum;
		uint256 gate;
// gate === 0 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481862332553440412426756423680001, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715936230020276258078721, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764345672663041, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3328);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481862332553440412426756423680001, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715936230020276258078721, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764345672663041, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3392);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2560);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 3
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2848);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2752);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 4
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3040);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2944);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 5
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3232);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3136);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 6
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2720);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 7
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2912);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2816);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 8
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3104);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3008);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 9
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3296);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3200);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 320), modulus);
		F = addmod(F, gate, modulus);
// gate === 1 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2944);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967368193, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2848);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630209, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2752);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630329, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2560);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		/* Constraint is a polynomial over one variable. Using Horner's formula */
		x = basic_marshalling.get_uint256_be(blob, 2656);
		sum = x;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630309, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 322, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967628377, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 6769, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967617205, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 13068, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967625297, modulus);
		sum = mulmod(sum, x, modulus);
		/* End using Horner's formula */
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3232);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954675638449792352257, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764348889694208, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676759951921118976, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954604706738749833216, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3360);
		prod = mulmod(prod, 1152921504606846976, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 72057594037927936, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 268435456, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 384), modulus);
		F = addmod(F, gate, modulus);
// gate === 2 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349699194881, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967613953, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3360);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764348893888513, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967613953, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764348893888513, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349699194881, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2560);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		/* Constraint is a polynomial over one variable. Using Horner's formula */
		x = basic_marshalling.get_uint256_be(blob, 2624);
		sum = x;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630331, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 11, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630331, modulus);
		sum = mulmod(sum, x, modulus);
		/* End using Horner's formula */
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 448), modulus);
		F = addmod(F, gate, modulus);
// gate === 3 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967106049, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967499265, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967629313, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		/* Constraint is a polynomial over one variable. Using Horner's formula */
		x = basic_marshalling.get_uint256_be(blob, 2880);
		sum = x;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630331, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 11, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630331, modulus);
		sum = mulmod(sum, x, modulus);
		/* End using Horner's formula */
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764348826779649, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2944);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967368176, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2848);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715953523842845360766976, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2752);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954675568081316610048, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3328);
		prod = mulmod(prod, 1152921504606846976, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3232);
		prod = mulmod(prod, 72057594037927936, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3136);
		prod = mulmod(prod, 268435456, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3040);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 512), modulus);
		F = addmod(F, gate, modulus);
// gate === 4 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3040);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349934075905, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2944);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967628289, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2848);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630273, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2752);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2560);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560714613608144686002729530, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764347990303594, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967512688, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560706566637880838129217138, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954665364776559184344, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954675135936369703080, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560650242314400718798480386, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3360);
		prod = mulmod(prod, 22539340290692258087863249, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 459986536544739960976801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 678223072849, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 576), modulus);
		F = addmod(F, gate, modulus);
// gate === 5 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630335, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630334, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2560);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 191581231380566414401, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 33232930569601, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 5764801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 640), modulus);
		F = addmod(F, gate, modulus);
// gate === 6 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3328);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764348893888513, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630081, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3136);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967613953, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3040);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3360);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349950853121, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 0);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3232);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349699194881, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3008);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3008);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2944);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		/* Constraint is a polynomial over one variable. Using Horner's formula */
		x = basic_marshalling.get_uint256_be(blob, 2944);
		sum = x;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630322, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 85, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630112, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 274, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630217, modulus);
		sum = mulmod(sum, x, modulus);
		/* End using Horner's formula */
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 704), modulus);
		F = addmod(F, gate, modulus);
// gate === 7 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630081, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3296);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349699194881, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967564801, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3200);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967613953, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3360);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349950853121, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3104);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3392);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764348893888513, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2912);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2816);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		/* Constraint is a polynomial over one variable. Using Horner's formula */
		x = basic_marshalling.get_uint256_be(blob, 2912);
		sum = x;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630316, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 175, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967629602, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 1624, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967628573, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 720, modulus);
		sum = mulmod(sum, x, modulus);
		/* End using Horner's formula */
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 768), modulus);
		F = addmod(F, gate, modulus);
// gate === 8 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3008);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2720);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 281474976710656, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 65536, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 832), modulus);
		F = addmod(F, gate, modulus);
// gate === 9 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3104);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349963436033, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3008);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967622145, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2912);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630333, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2816);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676746757781585921, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349900521473, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630321, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2560);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		/* Constraint is a polynomial over one variable. Using Horner's formula */
		x = basic_marshalling.get_uint256_be(blob, 2816);
		sum = x;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630331, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 11, modulus);
		sum = mulmod(sum, x, modulus);
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630331, modulus);
		sum = mulmod(sum, x, modulus);
		/* End using Horner's formula */
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 3
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676763250455740416, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676693981219258368, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676759951904342016, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715953523842570481827841, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 1152921504606846976, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 72057594037927936, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 268435456, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 896), modulus);
		F = addmod(F, gate, modulus);
// gate === 10 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3008);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3104);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2720);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3200);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2816);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 3
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3296);
		prod = mulmod(prod, 4294967296, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2912);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 960), modulus);
		F = addmod(F, gate, modulus);
// gate === 11 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2976);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481862332553440412426756423680001, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3072);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715936230020276258078721, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3168);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764345672663041, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 3264);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2720);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481862332553440412426756423680001, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715936230020276258078721, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764345672663041, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 1024), modulus);
		F = addmod(F, gate, modulus);
// gate === 12 ===
		gate = 0;
// constraint 0
		/* Constraint is a polynomial over one variable. Using Horner's formula */
		x = basic_marshalling.get_uint256_be(blob, 2880);
		sum = x;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = mulmod(sum, x, modulus);
		/* End using Horner's formula */
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		sum = addmod(sum, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2880);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2784), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2784), modulus);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2688);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2880), modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2592);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2880), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2784);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2880), modulus);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 1088), modulus);
		F = addmod(F, gate, modulus);

    }
}        