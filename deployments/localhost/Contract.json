{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zkllvmVerifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "verificationGate_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sum",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Contract.OracleReport",
          "name": "report",
          "type": "tuple"
        }
      ],
      "name": "ReportAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sum",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Contract.OracleReport",
          "name": "report",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "ReportRejected",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sum",
              "type": "uint256"
            }
          ],
          "internalType": "struct Contract.OracleReport",
          "name": "report",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "public_input",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "zkProof",
              "type": "bytes"
            }
          ],
          "internalType": "struct Contract.OracleProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "submitReportData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd6e419680106ef8a0dbd7c98ea7af5cae2c1042fd680ac61220ad8478acf2f6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1334441",
    "logsBloom": "0x
    "blockHash": "0x69d4195332a55ed333409f206a019283a736bd4cabe5e08a9119a5a776954d0d",
    "transactionHash": "0xbd6e419680106ef8a0dbd7c98ea7af5cae2c1042fd680ac61220ad8478acf2f6",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1334441",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "302373d55c962bb0d0823a9404549626",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zkllvmVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verificationGate_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Contract.OracleReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Contract.OracleReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ReportRejected\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"internalType\":\"struct Contract.OracleReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"public_input\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"zkProof\",\"type\":\"bytes\"}],\"internalType\":\"struct Contract.OracleProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"submitReportData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Contract.sol\":\"Contract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@nilfoundation/evm-placeholder-verification/contracts/interfaces/verifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0.\\n//---------------------------------------------------------------------------//\\n// Copyright (c) 2022 Mikhail Komarov <nemo@nil.foundation>\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//    http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n//---------------------------------------------------------------------------//\\npragma solidity ^0.8.0;\\n\\ninterface IVerifier {\\n    function verify(        \\n        bytes calldata blob,\\n        uint256[] calldata init_params,\\n        int256[][] calldata columns_rotations,\\n        uint256[] calldata public_input,\\n        address gate_argument\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6590affc453ea67b4c7e46acd0512c2b63873b2dd22ec67fdf34f61259772c4\",\"license\":\"Apache-2.0.\"},\"contracts/CircuitParams.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.4;\\n\\nlibrary CircuitParams {\\n    uint256 constant modulus = 28948022309329048855892746252171976963363056481941560715954676764349967630337;\\n    uint256 constant r = 2;\\n    uint256 constant max_degree = 7;\\n    uint256 constant lambda = 2;\\n\\n    uint256 constant rows_amount = 8;\\n    uint256 constant omega = 199455130043951077247265858823823987229570523056509026484192158816218200659;\\n\\n    function get_D_omegas()\\n    internal pure returns (uint256[2] memory) {\\n        uint256[2] memory D_omegas = [\\n            uint256(199455130043951077247265858823823987229570523056509026484192158816218200659), \\n            uint256(24760239192664116622385963963284001971067308018068707868888628426778644166363)\\n        ];\\n        return (D_omegas);\\n    }\\n    function get_step_list()\\n    internal pure returns (uint256[2] memory) {\\n        uint256[2] memory step_list = [\\n            uint256(1), \\n            uint256(1)\\n        ];\\n        return step_list;\\n    }\\n\\n    function get_arithmetization_params()\\n    internal pure returns (uint256[4] memory) {\\n        uint256[4] memory arithmetization_params = [\\n            uint256(15), \\n            uint256(5), \\n            uint256(5), \\n            uint256(30)\\n        ];\\n        return (arithmetization_params);\\n    }\\n\\n    function get_init_params()\\n    internal pure returns (uint256[] memory init_params) {\\n        uint256[2] memory d_omegas = get_D_omegas();\\n        uint256[2] memory step_list = get_step_list();\\n        uint256[4] memory arithmetization_params = get_arithmetization_params();\\n\\n        uint256[] memory init_args = new uint256[](\\n            6 // static fields: modulus to omega\\n            + (1 + d_omegas.length) // D_omegas.length + D_omegas\\n            + (1 + step_list.length) // step_list.length + step_list\\n            + (1 + arithmetization_params.length) // arithmetization_params.length + arithmetization_params\\n        );\\n\\n        uint cur_index = 0;\\n\\n        init_args[cur_index++] = modulus;\\n        init_args[cur_index++] = r;\\n        init_args[cur_index++] = max_degree;\\n        init_args[cur_index++] = lambda;\\n        init_args[cur_index++] = rows_amount;\\n        init_args[cur_index++] = omega;\\n\\n        // Append D_omegas and length\\n        init_args[cur_index++] = d_omegas.length;\\n        for (uint idx = 0; idx < d_omegas.length; idx++) {\\n            init_args[cur_index++] = d_omegas[idx];\\n        }\\n\\n        // Append step_list and length\\n        init_args[cur_index++] = step_list.length;\\n        for (uint idx = 0; idx < step_list.length; idx++) {\\n            init_args[cur_index++] = step_list[idx];\\n        }\\n\\n        // Append arithmetization_params and length\\n        init_args[cur_index++] = arithmetization_params.length;\\n        for (uint idx = 0; idx < arithmetization_params.length; idx++) {\\n            init_args[cur_index++] = arithmetization_params[idx];\\n        }\\n\\n        return (init_args);\\n    }\\n\\n    function makeDyn1(int256 value) internal pure returns (int256[] memory) {\\n        int256[] memory rslt = new int256[](1);\\n        rslt[0] = value;\\n        return rslt;\\n    }\\n\\n    function makeDyn3(int256 value1, int256 value2, int256 value3) internal pure returns (int256[] memory) {\\n        int256[] memory rslt = new int256[](3);\\n        rslt[0] = value1;\\n        rslt[1] = value2;\\n        rslt[2] = value3;\\n        return rslt;\\n    }\\n\\n    function get_column_rotations()\\n    internal pure returns (int256[][] memory) {\\n        int256[][] memory column_rotations = new int256[][](55);\\n        uint idx = 0;\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        column_rotations[idx++] = makeDyn1(0);\\n        return column_rotations;\\n    }\\n}\",\"keccak256\":\"0xe24d5eb3e0166b50eae26e81e79ad11617c85ce5cdc699f4350946853208d9c3\",\"license\":\"GPL-3.0\"},\"contracts/Contract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8 <0.9;\\n\\nimport \\\"./CircuitParams.sol\\\";\\nimport \\\"@nilfoundation/evm-placeholder-verification/contracts/interfaces/verifier.sol\\\";\\n\\n\\ncontract Contract {\\n    struct OracleReport {\\n        uint256 sum;\\n    }\\n\\n    struct OracleProof {\\n        uint256[] public_input;\\n        bytes zkProof;\\n    }\\n\\n    event ReportAccepted(OracleReport report);\\n    event ReportRejected(OracleReport report, string reason);\\n\\n\\n    IVerifier zkllvmVerifier;\\n    address verificationGate;\\n\\n    constructor(\\n        address zkllvmVerifier_,\\n        address verificationGate_\\n    ) {\\n        zkllvmVerifier = IVerifier(zkllvmVerifier_);\\n        verificationGate = verificationGate_;\\n    }\\n\\n    function submitReportData(\\n        OracleReport calldata report,\\n        OracleProof calldata proof\\n    ) public {\\n        _require(\\n            verifyZKLLVMProof(verificationGate, report, proof),\\n            report,\\n            \\\"ZK proof did not verify\\\"\\n        );\\n\\n        emit ReportAccepted(report);\\n    }\\n\\n    function verifyZKLLVMProof(\\n        address gate, OracleReport memory report, OracleProof memory proof\\n    ) internal view returns (bool) {\\n        uint256[] memory init_params = CircuitParams.get_init_params();\\n        int256[][] memory columns_rotations = CircuitParams.get_column_rotations();\\n        return zkllvmVerifier.verify(proof.zkProof, init_params, columns_rotations, proof.public_input, gate);\\n    }\\n\\n    function _require(bool condition, OracleReport memory report, string memory reason) internal {\\n        if (!condition) {\\n            // this is largely for documentation purposes, events in rejected transactions are discarded\\n            emit ReportRejected(report, reason);\\n            revert(reason);\\n        }\\n    }\\n}\",\"keccak256\":\"0xf97fc6ec90ae1d3c835761bd313aeeb74a07d0e4179d3c41ddad8f4a95904a38\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ce73c69d14610030575b600080fd5b61004361003e3660046111be565b610045565b005b6001546100c090610076906001600160a01b03166100683686900386018661128b565b6100718561133d565b6100f8565b6100853685900385018561128b565b6040518060400160405280601781526020017f5a4b2070726f6f6620646964206e6f7420766572696679000000000000000000815250610199565b604051823581527fdf2b1f05bda5e8b5e4882ec4e8344508dd8459b4e8ecb1e0d4f275e08f6e3eab9060200160405180910390a15050565b6000806101036101ff565b9050600061010f61058e565b6000546020860151865160405163c284622960e01b81529394506001600160a01b039092169263c28462299261014e9291879187918d9060040161148f565b602060405180830381865afa15801561016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018f919061155d565b9695505050505050565b826101fa577ff7c0c4a559b8187aa11cf01d19464980d0c6560bac5f272b1f42a8f1a890ee1d82826040516101cf929190611586565b60405180910390a18060405162461bcd60e51b81526004016101f191906115a8565b60405180910390fd5b505050565b6060600061020b611088565b905060006102176110e6565b90506000610223611106565b90506000610233600460016115d1565b61023f600260016115d1565b61024b600260016115d1565b6102569060066115d1565b61026091906115d1565b61026a91906115d1565b67ffffffffffffffff8111156102825761028261121b565b6040519080825280602002602001820160405280156102ab578160200160208202803683370190505b50905060007f40000000000000000000000000000000224698fc094cf91b992d30ed0000000182826102dc816115ea565b9350815181106102ee576102ee611603565b602090810291909101015260028282610306816115ea565b93508151811061031857610318611603565b602090810291909101015260078282610330816115ea565b93508151811061034257610342611603565b60209081029190910101526002828261035a816115ea565b93508151811061036c5761036c611603565b602090810291909101015260088282610384816115ea565b93508151811061039657610396611603565b60209081029190910101527e70e339f39258d62d9cfeedc219a1265b0a9daaed5ad56f7c18299e8f753a5382826103cc816115ea565b9350815181106103de576103de611603565b6020908102919091010152600282826103f6816115ea565b93508151811061040857610408611603565b60200260200101818152505060005b60028110156104715785816002811061043257610432611603565b60200201518383610442816115ea565b94508151811061045457610454611603565b602090810291909101015280610469816115ea565b915050610417565b506002828261047f816115ea565b93508151811061049157610491611603565b60200260200101818152505060005b60028110156104fa578481600281106104bb576104bb611603565b602002015183836104cb816115ea565b9450815181106104dd576104dd611603565b6020908102919091010152806104f2816115ea565b9150506104a0565b5060048282610508816115ea565b93508151811061051a5761051a611603565b60200260200101818152505060005b60048110156105835783816004811061054457610544611603565b60200201518383610554816115ea565b94508151811061056657610566611603565b60209081029190910101528061057b816115ea565b915050610529565b509095945050505050565b604080516037808252610700820190925260609160009190816020015b60608152602001906001900390816105ab57905050905060006105ce6000611137565b82826105d9816115ea565b9350815181106105eb576105eb611603565b60200260200101819052506106006000611137565b828261060b816115ea565b93508151811061061d5761061d611603565b60200260200101819052506106326000611137565b828261063d816115ea565b93508151811061064f5761064f611603565b60200260200101819052506106646000611137565b828261066f816115ea565b93508151811061068157610681611603565b60200260200101819052506106966000611137565b82826106a1816115ea565b9350815181106106b3576106b3611603565b60200260200101819052506106c86000611137565b82826106d3816115ea565b9350815181106106e5576106e5611603565b60200260200101819052506106fa6000611137565b8282610705816115ea565b93508151811061071757610717611603565b602002602001018190525061072c6000611137565b8282610737816115ea565b93508151811061074957610749611603565b602002602001018190525061075e6000611137565b8282610769816115ea565b93508151811061077b5761077b611603565b60200260200101819052506107906000611137565b828261079b816115ea565b9350815181106107ad576107ad611603565b60200260200101819052506107c26000611137565b82826107cd816115ea565b9350815181106107df576107df611603565b60200260200101819052506107f46000611137565b82826107ff816115ea565b93508151811061081157610811611603565b60200260200101819052506108266000611137565b8282610831816115ea565b93508151811061084357610843611603565b60200260200101819052506108586000611137565b8282610863816115ea565b93508151811061087557610875611603565b602002602001018190525061088a6000611137565b8282610895816115ea565b9350815181106108a7576108a7611603565b60200260200101819052506108bc6000611137565b82826108c7816115ea565b9350815181106108d9576108d9611603565b60200260200101819052506108ee6000611137565b82826108f9816115ea565b93508151811061090b5761090b611603565b60200260200101819052506109206000611137565b828261092b816115ea565b93508151811061093d5761093d611603565b60200260200101819052506109526000611137565b828261095d816115ea565b93508151811061096f5761096f611603565b60200260200101819052506109846000611137565b828261098f816115ea565b9350815181106109a1576109a1611603565b60200260200101819052506109b66000611137565b82826109c1816115ea565b9350815181106109d3576109d3611603565b60200260200101819052506109e86000611137565b82826109f3816115ea565b935081518110610a0557610a05611603565b6020026020010181905250610a1a6000611137565b8282610a25816115ea565b935081518110610a3757610a37611603565b6020026020010181905250610a4c6000611137565b8282610a57816115ea565b935081518110610a6957610a69611603565b6020026020010181905250610a7e6000611137565b8282610a89816115ea565b935081518110610a9b57610a9b611603565b6020026020010181905250610ab06000611137565b8282610abb816115ea565b935081518110610acd57610acd611603565b6020026020010181905250610ae26000611137565b8282610aed816115ea565b935081518110610aff57610aff611603565b6020026020010181905250610b146000611137565b8282610b1f816115ea565b935081518110610b3157610b31611603565b6020026020010181905250610b466000611137565b8282610b51816115ea565b935081518110610b6357610b63611603565b6020026020010181905250610b786000611137565b8282610b83816115ea565b935081518110610b9557610b95611603565b6020026020010181905250610baa6000611137565b8282610bb5816115ea565b935081518110610bc757610bc7611603565b6020026020010181905250610bdc6000611137565b8282610be7816115ea565b935081518110610bf957610bf9611603565b6020026020010181905250610c0e6000611137565b8282610c19816115ea565b935081518110610c2b57610c2b611603565b6020026020010181905250610c406000611137565b8282610c4b816115ea565b935081518110610c5d57610c5d611603565b6020026020010181905250610c726000611137565b8282610c7d816115ea565b935081518110610c8f57610c8f611603565b6020026020010181905250610ca46000611137565b8282610caf816115ea565b935081518110610cc157610cc1611603565b6020026020010181905250610cd66000611137565b8282610ce1816115ea565b935081518110610cf357610cf3611603565b6020026020010181905250610d086000611137565b8282610d13816115ea565b935081518110610d2557610d25611603565b6020026020010181905250610d3a6000611137565b8282610d45816115ea565b935081518110610d5757610d57611603565b6020026020010181905250610d6c6000611137565b8282610d77816115ea565b935081518110610d8957610d89611603565b6020026020010181905250610d9e6000611137565b8282610da9816115ea565b935081518110610dbb57610dbb611603565b6020026020010181905250610dd06000611137565b8282610ddb816115ea565b935081518110610ded57610ded611603565b6020026020010181905250610e026000611137565b8282610e0d816115ea565b935081518110610e1f57610e1f611603565b6020026020010181905250610e346000611137565b8282610e3f816115ea565b935081518110610e5157610e51611603565b6020026020010181905250610e666000611137565b8282610e71816115ea565b935081518110610e8357610e83611603565b6020026020010181905250610e986000611137565b8282610ea3816115ea565b935081518110610eb557610eb5611603565b6020026020010181905250610eca6000611137565b8282610ed5816115ea565b935081518110610ee757610ee7611603565b6020026020010181905250610efc6000611137565b8282610f07816115ea565b935081518110610f1957610f19611603565b6020026020010181905250610f2e6000611137565b8282610f39816115ea565b935081518110610f4b57610f4b611603565b6020026020010181905250610f606000611137565b8282610f6b816115ea565b935081518110610f7d57610f7d611603565b6020026020010181905250610f926000611137565b8282610f9d816115ea565b935081518110610faf57610faf611603565b6020026020010181905250610fc46000611137565b8282610fcf816115ea565b935081518110610fe157610fe1611603565b6020026020010181905250610ff66000611137565b8282611001816115ea565b93508151811061101357611013611603565b60200260200101819052506110286000611137565b8282611033816115ea565b93508151811061104557611045611603565b602002602001018190525061105a6000611137565b8282611065816115ea565b93508151811061107757611077611603565b602090810291909101015250919050565b611090611182565b50604080518082019091527e70e339f39258d62d9cfeedc219a1265b0a9daaed5ad56f7c18299e8f753a5381527f36bdcc7b0f28b5df31744fb72326829dff98203a45f8ebf0e047f48898cdb6db602082015290565b6110ee611182565b50604080518082019091526001808252602082015290565b61110e6111a0565b5060408051608081018252600f815260056020820181905291810191909152601e606082015290565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061117157611171611603565b602090810291909101015292915050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60008082840360408112156111d257600080fd5b60208112156111e057600080fd5b50829150602083013567ffffffffffffffff8111156111fe57600080fd5b83016040818603121561121057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156112545761125461121b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156112835761128361121b565b604052919050565b60006020828403121561129d57600080fd5b6040516020810181811067ffffffffffffffff821117156112c0576112c061121b565b6040529135825250919050565b600082601f8301126112de57600080fd5b813567ffffffffffffffff8111156112f8576112f861121b565b61130b601f8201601f191660200161125a565b81815284602083860101111561132057600080fd5b816020850160208301376000918101602001919091529392505050565b60006040823603121561134f57600080fd5b611357611231565b823567ffffffffffffffff8082111561136f57600080fd5b9084019036601f83011261138257600080fd5b81356020828211156113965761139661121b565b8160051b6113a582820161125a565b92835284810182019282810190368511156113bf57600080fd5b958301955b848710156113dd578635825295830195908301906113c4565b87525050868101359350828411156113f457600080fd5b611400368589016112cd565b908501525091949350505050565b6000815180845260005b8181101561143457602081850181015186830182015201611418565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b8381101561148457815187529582019590820190600101611468565b509495945050505050565b60a0815260006114a260a083018861140e565b6020838203818501526114b58289611454565b915083820360408501528187518084528284019150828160051b850101838a016000805b8481101561152c57878403601f19018652825180518086529088019088860190845b818110156115175783518352928a0192918a01916001016114fb565b505096880196945050918601916001016114d9565b5050508681036060880152611541818a611454565b9550505050505061018f60808301846001600160a01b03169052565b60006020828403121561156f57600080fd5b8151801515811461157f57600080fd5b9392505050565b825181526040602082015260006115a0604083018461140e565b949350505050565b60208152600061157f602083018461140e565b634e487b7160e01b600052601160045260246000fd5b808201808211156115e4576115e46115bb565b92915050565b6000600182016115fc576115fc6115bb565b5060010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a2ca6c59b457b1290004a30c8f8f103ccd0b9626579ddad61738250f9f6e039c64736f6c63430008130033",
  "libraries": {
    "CircuitParams": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 954,
        "contract": "contracts/Contract.sol:Contract",
        "label": "zkllvmVerifier",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVerifier)21"
      },
      {
        "astId": 956,
        "contract": "contracts/Contract.sol:Contract",
        "label": "verificationGate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IVerifier)21": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      }
    }
  }
}